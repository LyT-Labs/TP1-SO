#!/bin/bash

# This script runs ./ChompChamps or ./master with -h <height> -w <width> -v view {-p player -p player ...}
# where <height> and <width> are optional args of the script, defaulting in 10, and the times -p player appears is given via an arg, the number of players
# and the script to run is ChompChamps or master depending on if the -m flag is present

# Default values for height and width
height=-1
width=-1
num_players=9
delay=-1 # milliseconds
timeout=-1 #seconds
seed=-1 # seed for random number generation

# Parse arguments for height, width, and number of players
while getopts "h:w:n:m:d:t:s" opt; do
    case $opt in
        m) ;;
        h) height=$OPTARG ;;
        w) width=$OPTARG ;;
        n) num_players=$OPTARG ;;
        d) delay=$OPTARG ;;
        t) timeout=$OPTARG ;;
        s) seed=$OPTARG ;;
        *) echo "Usage: $0 [-h height] [-w width] [-n number_of_players]" >&2; exit 1 ;;
    esac
done

# -m flag to run master instead of ChompChamps
if [[ " $@ " =~ " -m " ]]; then
    cmd="./master -v view -p"
else
    cmd="./ChompChamps -v view -p"
fi

# Add the required number of players to the command
for ((i = 1; i <= num_players; i++)); do
    cmd+=" player"
done

# Add the height and width options if they are set
if [ $height -ne -1 ]; then
    cmd+=" -h $height"
fi
if [ $width -ne -1 ]; then
    cmd+=" -w $width"
fi

# Add the delay, timeout, and seed options if they are set
if [ $delay -ne -1 ]; then
    cmd+=" -d $delay"
fi
if [ $timeout -ne -1 ]; then
    cmd+=" -t $timeout"
fi
if [ $seed -ne -1 ]; then
    cmd+=" -s $seed"
fi

# Run the constructed command
eval "$cmd"